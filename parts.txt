	//send operations
	int left = msg_length_bytes;
	int sent = 0;
	uint32_t buffer_len = length;
	while (true) {
		int iSendLength = send(SocketFD, (char*)&buffer_len, left, 0);
		if ((iSendLength == SOCKET_ERROR) || (iSendLength == 0))
		{
			int er_code = WSAGetLastError();
			printf(" Sending length failed.\n Error code: %d\n", er_code);
			break;
		}
		sent+=iSendLength;
		if ((left -= iSendLength) == 0)
			break;
	}
	
		/*
	int iSendResult = send(SocketFD, buffer, length, 0);
	if ((iSendResult == SOCKET_ERROR) || (iSendResult == 0))
	{
	int er_code = WSAGetLastError();
	printf(" Sending data failed.\n Error code: %d\n", er_code);
	}*/
	/////////////////////////////////
			//receive message length
		/*int iRecvResult;
		int received = 0;
		char nlength[msg_length_bytes];
		while (received < msg_length_bytes) {
		iRecvResult = recv(i32ConnectFD, nlength, msg_length_bytes - received, 0);
		if ((iRecvResult == SOCKET_ERROR) || (iRecvResult == 0))
		{
		int er_code = WSAGetLastError();
		printf(" Receiving data failed.\n Error code: %d\n", er_code);
		closesocket(i32SocketFD);
		exit(EXIT_FAILURE);
		}
		else
		{
		received += iRecvResult;
		//printf("received: %s\n", iRecvResult);
		}
		}
		//nlength[received] = NULL;
		printf("message received: %s\n", nlength);*/

		int read = recv(i32ConnectFD, (char *)len_buf + received, left, 0);
		if (read == -1) {
			int er_code = WSAGetLastError();
			printf(" Receiving data failed.\n Error code: %d\n", er_code);
			closesocket(i32SocketFD);
			exit(EXIT_FAILURE);
		}
		printf("length received in while: %s\n", read);
		received += read;
		left -= read;


		std::bitset<2> y(len_buf);
		std::cout << "len_buf:" << y;
		printf("length received: %s\n", len_buf);
		/*
				//receive data
				int iRecvResult = recv(i32ConnectFD, buf, sizeof(buf), 0);

				if ((iRecvResult == SOCKET_ERROR) || (iRecvResult == 0))
				{
				int er_code = WSAGetLastError();
				printf(" Receiving data failed.\n Error code: %d\n", er_code);
				}
				else
				{
				//buf[iRecvResult] = NULL;
				printf("message received: %s\n", buf);
				}



				//write file
				std::ofstream os("received.txt", std::ifstream::binary);
				if (os) {
				// read data as a block:
				os.write(buf, sizeof(buf));
				os.close();
				}*/
				/////////////////////////////////////
							/*for (int i = 0; i < sizeof(buf) / sizeof(char); ++i)
			{
				std::cout << "buf[" << i << "] = " << buf[i] << '\t' << std::bitset<8>(buf[i]) << std::endl;
			}*/
			char* p = buf;
			for (int i = 0; i < 10; ++i)
			{
				std::cout << i+10 << " = " << std::bitset<8>(*(p+10+i)) << std::endl;
			}